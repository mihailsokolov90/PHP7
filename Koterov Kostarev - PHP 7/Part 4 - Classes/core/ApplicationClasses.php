<?php
/**
 * Created by PhpStorm.
 * User: Михаил
 * Date: 03.10.2019
 * Time: 16:50
 */

namespace core;

use E_ERROR_EXCEPTION;
use E_USER_ERROR_EXCEPTION;
use ch25\Exceptionaizer;
use ExceptionaizerException;
use ch25\FileException;
use ch25\XmlConfiguration;
use ch25\XmlException;
use common\Car;
use core\chapter22\ComplexNumber;
use core\chapter22\FileLogger;
use core\chapter22\User;
use core\chapter23\TraitsTest;

require_once "ApplicationBase.php";
require_once "chapter_22/ComplexNumber.php";
require_once "chapter_22/FileLogger.php";
require_once "chapter_22/User.php";
require_once "chapter_23/FileLoggerDebug.php";
require_once  "chapter_23/TraitsTest.php";

require_once "chapter_25/FileException.php";
require_once "chapter_25/XmlException.php";
require_once "chapter_25/XmlConfiguration.php";
require_once "chapter_25/Exceptionaizer/Exceptionaizer.php";
require_once "chapter_25/Exceptionaizer/ExceptionaizerExceptions.php";

require_once "common/Cars.php";

/*spl_autoload_register(function ($classname) {

    require_once(__DIR__."$classname.php");

}, true);*/


class ApplicationClasses extends ApplicationBase
{
    public function __construct()
    {
        parent::__construct();

        $this->_header = "Classes Study";
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub


    }

    public function Exec()
    {
        $this->Chapter_25_Exceptionaizer();
    }

    public function Chapter22_ObjectAndClasses()
    {
        // Complex Test
        $c1 = new ComplexNumber(20., 15.);
        $c2 = new ComplexNumber(27., -5.);

        $this->beginIndent();
        echo $c1->__toString();
        echo "<br/>";
        echo $c2->__toString();

        $c1->add($c2);
        echo "<br/> Addition: c1 + c2 => ";
        echo $c1->__toString();

        $this->endIndent();
    }

    public function Chapter22_Logger()
    {
        $this->PrintHeader4("Logger Class Test");

        try {
            $logger = new FileLogger("./info.log", "current");
            $logger->Log("Some Log data");

            mt_srand();
            $value = mt_rand(0, 10000000);

            $logger->Log("Some value: $value");
            $logger = null;
        }
        catch (\Exception $exception)
        {
            $this->PrintHeader4("Exception: ".$exception);
        }
    }

    public function Chapter22_ModifiersAndProperties()
    {
        $this->PrintHeader4("Свойства на лету");

        try {
            $logger = new FileLogger("./info.log", "current");
            $logger->Log("Some Log data");

            $this->PrintHeaderLevel("Новое свойство");
            $logger->currentTime = "12/07/2019";
            //$this->WriteLine($logger->currentTime);

            $this->WriteLine("");

            $this->WriteLine("Count instances: ".$logger->CountInstances());

            $this->WriteLine("");
            $this->WriteLine("Default name for log files is ".FileLogger::DEFAULT_NAME);

            $logger->CallUnexistingMethod();
            $logger->some_unext_method = 1122344;

            $logger = null;
        }
        catch (\Exception $exception)
        {
            $this->PrintHeader4("Exception: ".$exception);
        }
    }

    public function Chapter22_CopyAndClone()
    {
        self::PrintHeaderLevel("Copy and Clone objects", 2);

        self::WriteLine("Some new car:");

        $car = new Car(VOLKSWAGEN, VOLKSWAGEN_TIGUAN, 'A934MN197');
        self::WriteLine( $car->GetInfo() );
        self::WriteLine(" ");

        $car2 = clone $car;
        self::WriteLine("Cloned car:");
        self::WriteLine($car2->GetInfo());
    }

    public function Chapter22_SerializeTest()
    {
        self::PrintHeaderLevel("Serialize object", 2);

        self::WriteLine("Some new car:");

        $car = new Car(VOLKSWAGEN, VOLKSWAGEN_TIGUAN, 'A934MN197');
        self::WriteLine( $car->GetInfo() );

        $fname = "./car_data.info";
        self::WriteLine(" Serialzie to $fname....");

        $ser = serialize($car);
        self::WriteLine("Car data: ");
        echo "<pre> ".$ser." </pre>";
        echo "<br/>";

        $f = fopen($fname, 'w') or die("Can\'t open file $fname");
        fwrite($f, $ser);
        fclose($f);
        self::WriteLine("OK");
    }

    public function Chapter22_UnSerializeTest()
    {
        self::PrintHeaderLevel("UnSerialize object", 2);

        $fname = "./car_data.info";
        self::WriteLine(" Read from file $fname....");

        $f = fopen($fname, 'r') or die("Can\'t open file : $fname");
        $size = filesize($fname);
        $data = fread($f, $size);
        fclose($f);

        self::WriteLine("Data: ");
        self::WriteDataLine($data);

        $obj = unserialize($data);
        self::WriteLine("New Car object: ".$obj);
        self::WriteDataLine($obj);
    }

    public function Chapter22_UserSerializeTest()
    {
        self::PrintHeaderLevel("User Serialize object", 2);

        self::WriteLine("Some new User:");

        $user = new User("Some user", "1234");
        self::WriteLine( $user );

        $fname = "./user_data.info";
        self::WriteLine(" Serialzie to $fname....");

        $ser = serialize($user);
        self::WriteLine("Car data: ");
        echo "<pre> ".$ser." </pre>";
        echo "<br/>";

        $f = fopen($fname, 'w') or die("Can\'t open file $fname");
        fwrite($f, $ser);
        fclose($f);
        self::WriteLine("OK");
        self::WriteLine("---------------------------------------------------");

        self::PrintHeaderLevel("User UnSerialize object", 2);
        self::WriteLine(" Read from file $fname....");

        $f = fopen($fname, 'r') or die("Can\'t open file : $fname");
        $size = filesize($fname);
        $data = fread($f, $size);
        fclose($f);

        self::WriteLine("Data: ");
        self::WriteDataLine($data);

        $obj = unserialize($data);
        self::WriteLine("User object: ".$obj);
        self::WriteDataLine($obj);
    }

    public function Chapter23_InheritanceTest()
    {
        self::PrintHeaderLevel("Inheritance Classes", 2);

        self::WriteLine("Some logging...");

        $dbg = new FileLoggerDebug("./debug_data.txt", "mark#1");
        $dbg->debug("Some test message");
        $dbg->debug("Another message");
        $dbg->Close();

        $dbg->BacktraceInfo();
    }

    public function Chapter23_Traits()
    {
        self::PrintHeader4("Traits test");

        $traits = TraitsTest::CreateInstance();
        $traits->RunTest();
    }

    public function Chapter24_Namespace()
    {
        self::PrintHeader4("Namespace test");

        $traits = TraitsTest::CreateInstance();
        $traits->RunTest();
    }

    public function Chapter_25_Errors()
    {
        error_reporting(E_ALL);
        $error_log = ini_set('error_log', 'D:/Application Projects/PHP/Koterov Kostarev - PHP 7/Part 4 - Classes/tmp/errors.log');
        ini_set('log_errors', 'On');
        ini_set('display_errors', 'On');

        self::PrintHeader4("Errors and Debugging");
        self::WriteLine("Error Log File: <pre>".$error_log."</pre>" );

        $handler = set_error_handler( function($errno, $msg, $file, $line) {

            if( error_reporting() == 0 )
            {
                self::PrintHeaderLevel("Mute errors mode... -> Logging", 6);

                $log = "[".date('Y-m-d H:i:s')."] $errno -> ".$msg."; FROM $file; LINE $line";
                error_log($log, 0);

                return true;
            }


            self::WriteLine("");
            echo "<div style='border: 1px solid blue;'>\n";
            self::WriteLine("ERR_CODE: ".$errno);
            self::WriteLine("Message: ".$msg);
            self::WriteLine("File: <tt>".$file."</tt>");
            self::WriteLine("Line: ".$line);
            echo "</div>\n";

            return false;

        }, E_ALL );

        $fd = @fopen( @'./some_unexists_file.dump', "r+t" );

        trigger_error("User error reporting", E_USER_ERROR);

        restore_error_handler();
        ini_restore('error_log');
        ini_restore('log_errors');
        ini_restore('display_errors');
    }

    public function Chapter_25_Exceptions()
    {
        error_reporting(E_ALL);

        $err_log = 'D:/Application Projects/PHP/Koterov Kostarev - PHP 7/Part 4 - Classes/tmp/errors.log';

        ini_set('display_errors', 'On');
        ini_set('log_errors', 'On');
        ini_set('error_log', $err_log);

        self::PrintHeader4("Exceptions Test");

        try
        {
            $a = 12 / 0;

            $conf = new XmlConfiguration("config.xml");
            $file = $conf->getFile();
            self::WriteLine("Load config from: <b>$file</b>");
            self::WriteLine("User: ".$conf->get("user") );
            self::WriteLine("DB: ".$conf->get("db") );
            self::WriteLine("");

            self::PrintArray( $conf->getConf() );

        }
        catch (XmlException $e)
        {
            self::WriteLine("XML Exception: ".$e->getMessage() );
            self::WriteLine("XML Error: ".$e->getXmlError()->message );
        }
        catch (FileException $e)
        {
            self::WriteLine("File Exception: ".$e->getMessage() );
            self::WriteLine("Path: ".$e->getFile() );
        }
        catch (\Error $error)
        {
            self::WriteLine("Some Error: ".$error->getMessage());
        }
        catch (\Exception $e)
        {
            self::WriteLine("Other exception: ".$e->getMessage() );
            self::WriteLine("Trace: ".$e->getTraceAsString() );
        }

        ini_restore('error_log');
        ini_restore('log_errors');
        ini_restore('display_errors');
    }

    public function Chapter_25_Exceptionaizer()
    {
        self::PrintHeader4("Exceptionaizer Test");

        error_reporting(E_ALL);

        ini_set('display_errors', 'On');
        ini_set('log_errors', 'On');

        Exceptionaizer::Install();

        try {
            self::WriteLine("Trigger user error");
            trigger_error("Trigger Some user error", E_USER_ERROR);
        }
        catch (E_ERROR_EXCEPTION $exception)
        {
            $this->WritePreData($exception->getMessage());
        }
        catch (E_USER_ERROR_EXCEPTION $exception)
        {
            $this->WritePreData($exception->getMessage());
        }
        catch (ExceptionaizerException $exception)
        {
            $this->WritePreData($exception->getMessage());
        }
        finally
        {
            Exceptionaizer::Restore();
            self::PrintHeaderLevel("Done", 6);
        }
    }
}